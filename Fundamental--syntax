#script samples: gallery.technet.microsoft.com/script/center/site/search 

#command syntax: verb + noun -[argument sa: force to coerce] : -name   ArgumentString
         SA:      get - service                                -name   "*net*"
                      both: cmd                                   both: parameter
                  sa: get-service -name Audiosrv
                      install-module az -[pkg name] -scope currentuser
                      
      sa: update-help -Force 
          get-help | measure
      multiple get sa: get-help get-service -[detailed same as full, or -examples, or online for online help]
                                get-adcomputer 
 
      sa: get-eventlog -logname system -[newest, oldest] 3 -EntryType error -computerName dc,s1,s2

multiple powershell command at once: 
    cls; help about_eventlogs
    
--Get-Item -Detailed : get-alias -definition get-process
--get-help [*command*]: sa: get-help *service*

**get help popup window: 
    get-help get-service -ShowWindow
 
 **to redirect or pipe to a file:
      get-service | out-file -Filepath c:\[filename]
      get-service | ConvertTo-html -Property Name,status | out-file c:\test.html
    
--Remove-Item
--Set-Item #tab after each letter to scroll through the list
--Get-Host
--Get-Item C:\*
--Get-LocalUser
--Clear--[noun, host, content]
    --[verb:set, start, stop, suspsend, resume, restart, new----then noun (service, content)]
--Start--[program, software, sa: start-VM]
      sa: Start-Service 


config network:
ping [options]: ipconfig /all
  ping 

Directly run programs w/name
SA: notepad, calc, mspaint [just type program name]

#connect remotely to another pc w/in a domain
#used for deploying software
Enter-PSSession DC01
# defining variable by $
$var = Get-Item C:\Windows\*
$var
update-help : save-help


Get-command #enumerate list of command help 
  #get-command --> gcm -Module [module name]
get-alias
add-computer -DomainName [name.local] -LocalCredential [admin, rwx]

#get all users: 
get-ADUser -filter

Sample script:
$groups = Get-ADGroup -LDAPFilter "(name=*)"
$groups

gcm *member*
get-ADGroupmember -Identity Administrators

foreach ($group in $groups) {
    Get-ADGroupMember -Identity $group
}

alias echo
foreach ($group in $group) {
    write-output "...."
    write-output "...."
    Get-ADGroupMember -Identity $group
    write-output "-----end----"
}


PS: Excercise Files: 
Built-in MS products: VMware, Citrix

I. How to read the language: help samples from MS.com/library 
       get-service set-VM (configure VM) [-name]
      
      a. Get-Service  -name  "*net*" 
            cmd         parameter
            sa prop names: status [stopped, running]
                           name   [NetLogon, Netman]
                      DisplayName [NetLogon, Network Connections]
            yield: prop names & prop values    
            
            
            get-service & get-member
            get-service | where-object {$_.status -ne "stopped"}
            sa: get-service s* | sort-object status -descending
                get-service | stop-service -confirm
                get-service -computername webserver -RequiredServices
            get-member 
            
     B. Pipe to out-file:
            sa: get-service | out-file c:\service.js
                get-sevice | format-[list,table,object] <string>[argument1, argument2, argument3, etc: arg is csv]
                get-item | select-object * | out-gridview 
     
     C. PS function: {$...}
        sa: Function divide
            { $divide = [int](10/3)
            write-output "$divide"
            }
         PS gui: ISE out-file ise
            ISE: to run PS script (practice) has intellisense 
         gridview: out-file to a gui env 
            sa: get-service | out-gridview
      
      D. Running PowerShell Remotely 
 
 ##Remote script in ps has to be digitally signed
 
 Powershell on Premises & Online
      A. Finding & installing modules:
         get-modules -listavailable | out-ShowWindow 
         #manualy load module
               sa: import-module -name applocker
                   get-ExecutionPolicy -name[restricted, unrestricted, etc] | out-ISE 
      B. Server Cmdlets: (verb: add, get, subtract::noun: WBPolicy]
                  sa: assign var:
                          $policy = new-WBPolicy
                          $FileSpec = New-WBFileSpec -FileSpec C:\samples
                          Add-WBFileSpec -Policy $policy -FileSpec $filespec 
                          $backupLocation = New-WBBackupTarget -VolumePath Q:
                          Add-WBBackupTarget -Policy $policy -Target $backupLocation
                          Set-WBSchedule -Policy $policy 09:00 
                          Set-WBPolicy -Policy $policy
                          $BUpolicy = get-WBPolicy
       C. Office 365 & PS
         2ways: Azure AD PS for graph module
                  install-module -name AzureAD
                Microsoft Azure Active Directory Module for Windows PS
                install-module MSOnline
                
         
